#!/usr/bin/env python3

"""
Format JSON with indentation. Optionally sorts keys.
"""

import argparse
import ast
import json
import logging
import os
import sys

logging.basicConfig(format="%(module)s: %(levelname)s: %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

COLOR_SNIP = "\033[2;3;37m"
COLOR_HERE = "\033[1;3;31m"
COLOR_RESET = "\033[0m"

def lookup_key(data, query):
  "Get a specific thing from within the data"
  curr_data = data
  key, rest = query, ""
  if "/" in query:
    key, rest = query.split("/", 1)
  if isinstance(curr_data, list) and key.isdigit():
    curr_data = curr_data[int(key)]
  elif isinstance(curr_data, dict):
    curr_data = curr_data[key]
  elif isinstance(curr_data, str):
    raise ValueError("can't get attribute {!r} of a string".format(key))
  if rest:
    curr_data = lookup_key(curr_data, rest)
  return curr_data

def highlight_sequence(text, pos, lead=8, tail=8, color=True):
  "Highlight a subsequence of text at the given position"
  snip_text = "<snip>"
  if color:
    snip_text = "{}{}{}".format(COLOR_SNIP, snip_text, COLOR_RESET)
  here_text = "<HERE>"
  if color:
    here_text = "{}{}{}".format(COLOR_HERE, here_text, COLOR_RESET)
  if pos-lead < 0:
    text_pre = text[:pos]
  else:
    text_pre = snip_text + text[pos-lead:pos]
  if pos+tail > len(text):
    text_post = text[pos:]
  else:
    text_post = text[pos:pos+tail] + snip_text
  logger.debug("Highlighting %d between %r and %r", pos, text_pre, text_post)
  return text_pre + here_text + text_post

def main():
  FileType = argparse.FileType("rt")
  ap = argparse.ArgumentParser(epilog="""
The -l,--lookup option allows for XPath-style access to part of the data
based on a pattern. The components are separated by forward slashes "/".
For example, 'data/entries/0/value' would give the value of
json["data"]["entries"][0]["value"].
  """)
  ap.add_argument("path", type=FileType, nargs="*", default=[sys.stdin],
      help="path(s) to read (default: stdin)")
  ag = ap.add_argument_group("querying")
  ag.add_argument("-l", "--lookup", metavar="PATTERN",
      help="access a specific key")
  ag = ap.add_argument_group("formatting")
  ag.add_argument("-i", "--indent", type=int, default=2, metavar="N",
      help="indent level (default: %(default)s)")
  ag.add_argument("-s", "--sort-keys", action="store_true", help="sort keys")
  ag = ap.add_argument_group("diagnostics")
  ag.add_argument("-w", "--width", type=int, default=8, metavar="N",
      help="number of characters to include on error (default: %(default)s)")
  ag.add_argument("-C", "--no-color", action="store_true",
      help="disable error color formatting")
  ag.add_argument("-v", "--verbose", action="store_true", help="be verbose")
  args = ap.parse_args()
  if args.verbose:
    logger.setLevel(logging.DEBUG)

  failure = False   # Set to True if there was a JSON decode failure

  for fobj in args.path:
    text = fobj.read()
    logger.debug("Formatting %s (%d characters)", fobj.name, len(text))
    try:
      data = json.loads(text)
    except json.JSONDecodeError as e:
      logger.error(e)
      logger.warning(highlight_sequence(text, e.pos,
        lead=args.width, tail=args.width, color=not args.no_color))
      failure = True
    else:
      if args.lookup:
        data = lookup_key(data, args.lookup)
      print(json.dumps(data, indent=args.indent, sort_keys=args.sort_keys))

  if failure:
    raise SystemExit(1)

if __name__ == "__main__":
  main()

# vim: set ft=python ts=2 sts=2 sw=2:
